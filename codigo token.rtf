{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // SPDX-License-Identifier:MIT\
pragma solidity ^0.8.0;\
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";\
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";\
import "@openzeppelin/contracts/security/Pausable.sol";\
import "@openzeppelin/contracts/access/Ownable.sol";\
\
contract Realstate is ERC20, ERC20Burnable, Pausable, Ownable \{\
    constructor() ERC20("Realstate", "RSC") \{\
        _mint(msg.sender, 1000000 * 10 ** decimals());\
    \}\
\
    function pause() public onlyOwner \{\
            _pause();\
    \}\
\
    function unpause() public onlyOwner \{\
        _unpause();\
    \}\
\
    function mint(address to, uint256 amount) public onlyOwner \{\
        _mint(to, amount);\
    \}\
\
    function _beforeTokenTransfer(address from, address to, uint256 amount)\
        internal\
        whenNotPaused\
        override\
    \{\
        super._beforeTokenTransfer(from, to, amount);\
    \}\
\}}